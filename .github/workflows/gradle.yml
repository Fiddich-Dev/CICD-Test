name: Build and Deploy

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: my-app-repo
  CONTAINER_NAME: my-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      run: |
        docker build -t ${{ env.ECR_REPOSITORY }} .
        IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
        docker tag ${{ env.ECR_REPOSITORY }}:latest ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
        echo "image=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Trigger CodeDeploy
      run: |
        aws deploy create-deployment \
          --application-name MyApp \
          --deployment-group-name MyAppDeploymentGroup \
          --revision '{
            "revisionType": "AppSpecContent",
            "appSpecContent": {
              "content": "version: 0.0\nResources:\n  - TargetService:\n      Type: AWS::ECS::Service\n      Properties:\n        TaskDefinition: \"${{ steps.build-image.outputs.image }}\"\n        LoadBalancerInfo:\n          ContainerName: \"${{ env.CONTAINER_NAME }}\"\n          ContainerPort: 8080",
              "sha256": "$(echo -n "version: 0.0\nResources:\n  - TargetService:\n      Type: AWS::ECS::Service\n      Properties:\n        TaskDefinition: \"${{ steps.build-image.outputs.image }}\"\n        LoadBalancerInfo:\n          ContainerName: \"${{ env.CONTAINER_NAME }}\"\n          ContainerPort: 8080" | sha256sum | cut -d \" \" -f 1)"
            }
          }'
