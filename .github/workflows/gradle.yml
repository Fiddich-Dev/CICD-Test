# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      # with:
      #   java-version: ‘11’
      #   distribution: ‘temurin’
        
    - name: Build with Gradle
      run: ./gradlew clean build
      

    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.APP_NAME }} .

    - name: Save Docker image to archive
      run: |
        docker save ${{ secrets.APP_NAME }} | gzip > ${GITHUB_SHA}.tar.gz

    - name: Copy image to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "${{ github.sha }}.tar.gz"
        target: "/home/${{ secrets.EC2_USER }}/"

    - name: SSH into EC2 and run container
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          docker stop ${{ secrets.APP_NAME }} || true
          docker rm ${{ secrets.APP_NAME }} || true
          gunzip -f ${{ github.sha }}.tar.gz
          docker load -i ${{ github.sha }}.tar
          docker run -d --name ${{ secrets.APP_NAME }} -p 80:8080 ${{ secrets.APP_NAME }}
